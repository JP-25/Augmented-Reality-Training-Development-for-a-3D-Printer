'''
Charles Tuttle, 2019
Code used to automate the FormLabs software, PreForm. 
This is done using the python library pynput. These functions are dependant
on the number of pixels on the user's screen. Current edition is generated 
based on a 4k monitor (3840 x 2610) at 175% magnification of applications. 
This value is subject to change, and may be altered in later editions of 
this code.
These values were selected based on the assumption of a modern standard monitor
functioning on the computer off of which the system runs. 
The magnification was selected to allow for easy user access of the preForm 
software. 
This code functions with an infinite while loop, only broken once the user 
decides to start the current print.
The objective of this code is to take unput from a microphone and from a 
3D model generated by the microsoft hololens, and appy it to the PreForm 
software environment. Currently, all functions are implemented, and the 
user has full real-time access of preform without using any computer input, 
solely relying on the microphone and the hololens to input information
to the software. 
 
'''

# Jinhao Pan, 2021
# modified some codes from python 2 to python 3, changes made basically from start string, cannot use int() to convert "True" and "False" in python 3 now
# change start[17] from "0" to "1" in NLP script
# edit some commands to make sure the mouse click at the correct position, make the sleep time longer. Still need to make changes for more commands' mouse position for different resolution computer screens.

import time
import re
import socket
from pynput.keyboard import Key, Controller as KeyboardController
from pynput.mouse import Button, Controller as MouseController

'''
    global parameters
'''
keyboard = KeyboardController()
mouse = MouseController()

# add function to corrctly output boolean values
def str_bool(input):
    return input in ("True")


def main():

    # testing parameters (boolean)
    start = False
    UploadFile = False
    
    # automatic paramaters (booleans)
    OneClick = False
    AutoOrient = False
    AutoGenerate = False
    GenerateLayout = False

    # support parameters
    RaftType = 2 #current operating raft type (1-3)
    NewRaftType = 2 #input value between 1 and three
    
    RaftLabel = False #boolean tickbox
    InternalSupports = False #boolean tickbox
    
    
    # numerical support input values
    #flags for editing numerical values
    # 0 = do nothing (passive condition)
    # 1 = +0.05
    # 2 = +0.1
    # 3 = -0.05
    # 4 = -0.1
    Density = 0
    TouchpointSize = 0
    SlopeMultiplier = 0
    HeightAbove = 0
    RaftThickness = 0

    # general parameters
    undo = False
    StartPrint = False

    #angle: taken as three seperate angle coordinates
    # can be any number
    a = '0'
    b = '0'
    c = '0'

    #size: taken as a percentage of the whole
    InputSize = '1'
    CurrentSize = '1'

    if start == True:
        #open file from last location
        if UploadFile == True:
            #open
            mouse.position = (16,30)
            time.sleep(.1)
            mouse.click(Button.left, 1)
            time.sleep(.1)
            #select file location
            mouse.position = (53,114)
            time.sleep(.1)
            mouse.click(Button.left, 1)
            time.sleep(.1)
            #open file
            mouse.position = (287,138)
            time.sleep(.1)
            mouse.click(Button.left, 2)
            time.sleep(.1)
            
            #reset the upload file condition to prepare for next call
            UploadFile = False
            print('file uploaded from recent location')

        # access support panel and advanced bar
        # prepares environment for other commands to access
        mouse.position = (27,234)
        time.sleep(.1)
        mouse.click(Button.left, 1)
        time.sleep(.1)

        #click advanced
        mouse.position = (226,495)
        time.sleep(.2)
        mouse.click(Button.left, 1)
        time.sleep(1)

        #close window again
        mouse.position = (27,234)
        time.sleep(.1)
        mouse.click(Button.left, 1)
        time.sleep(.1)
        print('start done')
    
    #main loop of the funcion
    #apply x, y, z coordinates if needed

    # this selects the model currently on the board
    # click off of the board to select window
    # mouse.position = (598,70)
    # mouse.click(Button.left, 1)
    # time.sleep(.1)
    
    

    # ctrl+a
    # keyboard.press(Key.ctrl)
    # keyboard.press('a')
    # time.sleep(.1)
    # keyboard.release('a')
    # keyboard.release(Key.ctrl)
    # time.sleep(.1)

    # start the server up
    serverSock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

    serverSock.bind(("",80))
    
    while True: 

        message, address = serverSock.recvfrom(1024)
        print("received message:", message)

        start = message.decode("utf-8")

        start = start.split(',', 17)

        end = []

        # automatic paramaters (booleans)
        # OneClick = bool(int(start[0]))
        # AutoOrient = bool(int(start[1]))
        # AutoGenerate = bool(int(start[2]))
        # GenerateLayout = bool(int(start[3]))
        
        # changes made here
        OneClick = str_bool(start[0])
        AutoOrient = str_bool(start[1])
        AutoGenerate = str_bool(start[2])
        GenerateLayout = str_bool(start[3])

        # support parameters
        NewRaftType = int(start[4]) #input value between 1 and three

        # RaftLabel = bool(int(start[5])) #boolean tickbox
        # InternalSupports = bool(int(start[6])) #boolean tickbox
		# make changes here
        RaftLabel = str_bool(start[5])
        InternalSupports = str_bool(start[6])


        # numerical support input values
        #flags for editing numerical values
        # 0 = do nothing (passive condition)
        # 1 = +0.05
        # 2 = +0.1
        # 3 = -0.05
        # 4 = -0.1
        Density = int(start[7])
        TouchpointSize = int(start[8])
        SlopeMultiplier = int(start[9])
        HeightAbove = int(start[10])
        RaftThickness = int(start[11])

        # general parameters
        # undo = bool(int(start[12]))
        # StartPrint = bool(int(start[13]))
        
        # changes made here
        undo = str_bool(start[12])
        StartPrint = str_bool(start[13])

        #angle: taken as three seperate angle coordinates
        # can be any number
        a = start[14]
        b = start[15]
        c = start[16]

        #size: taken as a percentage of the whole
        InputSize = start[17]
        print ("input size: ", InputSize)
        print ("Current Size: ", CurrentSize)
        
        
        
        if OneClick == True:
            #start one-click printing
            #menu
            mouse.position = (16,30)
            time.sleep(.1)
            mouse.click(Button.left, 1)
            time.sleep(.1)
            
            #start one click print
            mouse.position = (61,59)
            time.sleep(.1)
            mouse.click(Button.left, 1)
            time.sleep(20) # wait for one click print to finish
            
            #reset condition
            OneClick = False
            
            print('one click print success')
            break

        
        else:
            if InputSize != CurrentSize:
                #change the size
                #open size panel
                mouse.position = (25,121)
                time.sleep(.3)
                mouse.click(Button.left, 1)
                time.sleep(.3)
                
                #select text box
                mouse.position = (320,117)
                time.sleep(.3)
                mouse.click(Button.left, 3)
                time.sleep(.3)
                
                #input data
                keyboard.type(InputSize)

                keyboard.press(Key.enter)
                keyboard.release(Key.enter)
                
                #reset condition
                CurrentSize = InputSize
                print('custom size change success')
                    
            if AutoOrient == True:
                #perform auto-orient
                #open angle panel
                mouse.position = (26,185)
                time.sleep(.3)
                mouse.click(Button.left, 1)
                time.sleep(.3)
                
                #double click start auto-orient
                mouse.position = (230,122)
                # time.sleep(.1)
                # mouse.click(Button.left, 1)
                time.sleep(.3)
                mouse.click(Button.left, 1)
                time.sleep(5)
                
                #reset start condition
                AutoOrient = False
                print('auto-orientation success')
                
            elif a != '0' or b != '0' or c != '0':
                #perform manual orient
                mouse.position = (26,185)
                time.sleep(.1)
                mouse.click(Button.left, 1)
                time.sleep(.1)

                #change a
                mouse.position = (194,315)
                time.sleep(.1)
                mouse.click(Button.left, 1)
                time.sleep(.1)
                
                #input data
                keyboard.type(a)
                
                #enter
                keyboard.press(Key.enter)
                keyboard.release(Key.enter)
                
                #reset conditiona a
                a = '0'

                #change b
                mouse.position = (188,359)
                time.sleep(.1)
                mouse.click(Button.left, 1)
                time.sleep(.1)
                
                #enter data
                keyboard.type(b)

                #enter
                keyboard.press(Key.enter)
                keyboard.release(Key.enter)
                
                #reset condition b
                b = '0'
                
                #change c
                mouse.position = (193,398)
                time.sleep(.1)
                mouse.click(Button.left, 1)
                time.sleep(.1)
                
                #enter data
                keyboard.type(c)
                
                #enter
                keyboard.press(Key.enter)
                keyboard.release(Key.enter)

                #reset condition c
                c = '0'

                print('custom orientation success')
                
            if AutoGenerate == True:
                #preform auto-generate support structure
                #select supports panel
                mouse.position = (27,234)
                time.sleep(.1)
                mouse.click(Button.left, 1)
                time.sleep(.1)
                   
                #double click autogenerate
                mouse.position = (235,121)
                # time.sleep(.1)
                # mouse.click(Button.left, 1)
                time.sleep(.3)
                mouse.click(Button.left, 1)
                time.sleep(30)
                
                #reset entry condiditon 
                AutoGenerate = False
                
                #keep elif from activating
                ManualGenerate = False
                print('auto-generate supports success')

            #only activates if user flag is input
            elif AutoGenerate == False:

                # opens up support panel
                mouse.position = (27,234)
                time.sleep(.3)
                mouse.click(Button.left, 1)
                time.sleep(.3)

                # select the raft type
                if NewRaftType != RaftType: 
                    if NewRaftType == 2: # full raft
                        #open raft drop down
                        mouse.position = (300,250)
                        time.sleep(.3)
                        mouse.click(Button.left, 1)
                        time.sleep(.3)
                        
                        #click the raft type
                        mouse.position = (300,270)
                        time.sleep(.3)
                        mouse.click(Button.left, 1)
                        time.sleep(.3)
                           
                        #apply new raft type condiiton
                        RaftType = NewRaftType
                        
                    elif NewRaftType == 1: # mini raft
                        #open raft drop down
                        mouse.position = (300,250)
                        time.sleep(.3)
                        mouse.click(Button.left, 1)
                        time.sleep(.3)
                        #print("l391")

                        #click the raft type
                        mouse.position = (300,295)
                        time.sleep(.3)
                        mouse.click(Button.left, 1)
                        time.sleep(.3)
                        #print("l398")
                        
                        #apply new raft type condition
                        RaftType = NewRaftType
                    elif NewRaftType == 3: # no raft
                        #open raft drop down menu
                        mouse.position = (300,250)
                        time.sleep(.3)
                        mouse.click(Button.left, 1)
                        time.sleep(.3)

                        #click the raft type
                        mouse.position = (300,340)
                        time.sleep(.3)
                        mouse.click(Button.left, 1)
                        time.sleep(.3)

                        #apply new raft type condition
                        RaftType = NewRaftType

                    print('raft type success')

                
                # perform manual generation of supports
                    if RaftLabel == True:
                        #raft label tickbox
                        time.sleep(.3)
                        mouse.position = (321,280)
                        mouse.click(Button.left, 1)
                        #time.sleep(.1)
        
                        #reset input condition for loop
                        RaftLabel = False
                        print('raft label success')
                    
                
                # support density input change
                if Density > 0 and Density <= 4:
                    if Density == 1: # up by one click
                        mouse.position = (372,367)
                        time.sleep(.1)
                        mouse.click(Button.left, 1)
                        time.sleep(.1)
                        
                    elif Density == 2: # up by two clicks
                        mouse.position = (372,367)
                        time.sleep(.1)
                        mouse.click(Button.left, 1)
                        #time.sleep(.1)
                        mouse.click(Button.left, 1)
                        time.sleep(.1)
                        
                    elif Density == 3: # down by one click
                        mouse.position = (373,383)
                        time.sleep(.1)
                        mouse.click(Button.left, 1)
                        time.sleep(.1)
                        
                    elif Density == 4: # down by two clicks
                        mouse.position = (373,383)
                        time.sleep(.1)
                        mouse.click(Button.left, 1)
                        #time.sleep(.1)
                        mouse.click(Button.left, 1)
                        time.sleep(.1)
                      
                    #reset condition for next iteration  
                    Density = 0
                    print('density success')

                
                # support TouchpointSize input change
                if TouchpointSize > 0 and TouchpointSize <= 4:
                    if TouchpointSize == 1: # up by one click
                        mouse.position = (371,402)
                        time.sleep(.1)
                        mouse.click(Button.left, 1)
                        time.sleep(.1)
                        
                    elif TouchpointSize == 2: # up by two clicks
                        mouse.position = (371,402)
                        time.sleep(.1)
                        mouse.click(Button.left, 1)
                        #time.sleep(.1)
                        mouse.click(Button.left, 1)
                        time.sleep(.1)
                        
                    elif TouchpointSize == 3: # down by one click
                        mouse.position = (374,419)
                        time.sleep(.1)
                        mouse.click(Button.left, 1)
                        time.sleep(.1)
                        
                    elif TouchpointSize == 4: # down by two clicks
                        mouse.position = (374,419)
                        time.sleep(.1)
                        mouse.click(Button.left, 1)
                        #time.sleep(.1)
                        mouse.click(Button.left, 1)
                        time.sleep(.1)
                        
                    #reset condition for next iteration  
                    TouchpointSize = 0
                    print('touchpoint size success')

                
                # generate internal supports checkbox
                if InternalSupports == True:
                    #internal supports tickbox
                    mouse.position = (376,452)
                    time.sleep(.1)
                    mouse.click(Button.left, 1)
                    time.sleep(.1)
                    
                    # reset input condition 
                    InternalSupports == False
                    print('internal support success')
                
                # support SlopeMultiplier input change
                if SlopeMultiplier > 0 and SlopeMultiplier <= 4:
                    if SlopeMultiplier == 1: # up by one click
                        mouse.position = (373,550)
                        time.sleep(.1)
                        mouse.click(Button.left, 1)
                        time.sleep(.1)
                        
                    elif SlopeMultiplier == 2: # up by two clicks
                        mouse.position = (373,550)
                        time.sleep(.1)
                        mouse.click(Button.left, 1)
                        #time.sleep(.1)
                        mouse.click(Button.left, 1)
                        time.sleep(.1)
                        
                    elif SlopeMultiplier == 3: # down by one click
                        mouse.position = (373,568)
                        time.sleep(.1)
                        mouse.click(Button.left, 1)
                        time.sleep(.1)
                        
                    elif SlopeMultiplier == 4: # down by two clicks
                        mouse.position = (373,568)
                        time.sleep(.1)
                        mouse.click(Button.left, 1)
                        #time.sleep(.1)
                        mouse.click(Button.left, 1)
                        time.sleep(.1)
                        
                    #reset condition for next iteration
                    SlopeMultiplier = 0
                    print('slope multiplier success')

                # support HeightAbove input change
                if HeightAbove > 0 and HeightAbove <= 4:
                    if HeightAbove == 1: # up by one click
                        mouse.position = (373,591)
                        time.sleep(.1)
                        mouse.click(Button.left, 1)
                        time.sleep(.1)
                        
                    elif HeightAbove == 2: # up by two clicks
                        mouse.position = (373,591)
                        time.sleep(.1)
                        mouse.click(Button.left, 1)
                        #time.sleep(.1)
                        mouse.click(Button.left, 1)
                        time.sleep(.1)
                        
                    elif HeightAbove == 3: # down by one click
                        mouse.position = (373,605)
                        time.sleep(.1)
                        mouse.click(Button.left, 1)
                        time.sleep(.1)
                        
                    elif HeightAbove == 4: # down by two clicks
                        mouse.position = (373,605)
                        time.sleep(.1)
                        mouse.click(Button.left, 1)
                        #time.sleep(.1)
                        mouse.click(Button.left, 1)
                        time.sleep(.1)
                        
                    HeightAbove = 0
                    print('height above success')

                # support RaftThickness input change
                if RaftThickness > 0 and RaftThickness <= 4:
                    if RaftThickness == 1: # up by one click
                        mouse.position = (373,630)
                        time.sleep(.1)
                        mouse.click(Button.left, 1)
                        time.sleep(.1)
                        
                    elif RaftThickness == 2: # up by two clicks
                        mouse.position = (373,630)
                        time.sleep(.1)
                        mouse.click(Button.left, 1)
                        #time.sleep(.1)
                        mouse.click(Button.left, 1)
                        time.sleep(.1)
                        
                    elif RaftThickness == 3: # down by one click
                        mouse.position = (373,646)
                        time.sleep(.1)
                        mouse.click(Button.left, 1)
                        time.sleep(.1)
                        
                    elif RaftThickness == 4: # down by two clicks
                        mouse.position = (373,646)
                        time.sleep(.1)
                        mouse.click(Button.left, 1)
                        #time.sleep(.1)
                        mouse.click(Button.left, 1)
                        time.sleep(.1)
                        
                    #reset condition for next iteration  
                    RaftThickness = 0
                    print('raft thickness success')

                #generate new supports with new settings (click auto-generate supports again)
                mouse.position = (235,121)
                time.sleep(.1)
                mouse.click(Button.left, 1)
                time.sleep(.3)
                mouse.click(Button.left, 1)
                time.sleep(30)

                #close support generation tab
                mouse.position = (27,234)
                time.sleep(.1)
                mouse.click(Button.left, 1)
                time.sleep(.1)
                
                #reset manual generate flag until new input
                ManualGenerate = False

            if GenerateLayout == True:
                #generate the layout
                mouse.position = (26,297)
                time.sleep(.1)
                mouse.click(Button.left, 1)
                time.sleep(.1)

                #click layout all
                mouse.position = (237,122)
                time.sleep(.1)
                mouse.click(Button.left, 1)
                time.sleep(.3)
                mouse.click(Button.left, 1)
                time.sleep(3)

                #reset generate layout condition for next iteration
                GenerateLayout = False
                print('layout generation success')
            
            if undo == True:
                #perform undo

                #ctrl+z
                keyboard.press(Key.ctrl)
                keyboard.press('z')
                time.sleep(.1)
                keyboard.release('z')
                keyboard.release(Key.ctrl)
                time.sleep(.1)
                
                #reset input undo condition
                undo = False
                print('undo success')

            #for now, calling a successful start print breaks the function
            if StartPrint == True:
                #start print
                
                #click start print button at bottom of panel
                mouse.position = (24,350)
                time.sleep(.1)
                mouse.click(Button.left, 1)
                time.sleep(.1)

                #once connected to printer the rest will be implemented
                #preform requires user to access printer to continue the dialog
                StartPrint = False
                
                #break out of the infinite while loop
                break
            
                
    
        #print('loop done')
        #time.sleep(2)
        
    #print('main done')
    
if __name__=="__main__":
    main()